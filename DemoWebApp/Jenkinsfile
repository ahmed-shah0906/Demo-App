pipeline {

    environment {
        scannerHome = tool name:'sonar_scanner_dotnet', type:'hudson.plugins.sonar.MsBuildSQRunnerInstallation'
        registry = "shahrukhahmed/demoapp"
        registryCredential = 'docker-hub-cred'
        dockerImage = ''
    }

    agent any
    
    options {
        
        buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '10', daysToKeepStr: '5', numToKeepStr: '5'))

	    disableConcurrentBuilds()
		
	    skipDefaultCheckout()
    }


    stages {
        stage('Develop Pipeline'){
            steps{
                echo "hello! Iâ€™m in develop environment"
            }
        }
        stage('Checkout') {
            steps {
            checkout([$class: 'GitSCM', branches: [[name: '*/develop']],
            userRemoteConfigs: [[credentialsId: 'git-hub-password',
				url: 'https://github.com/ahmed-shah0906/Demo-App.git']]
            ])
            }
        }
        
    stage('Nuget Restore'){
        steps{
            bat "dotnet restore DemoWebApp\\DemoWebApp.sln"
        }
    }

    stage('Start Sonarqube Analysis'){
        steps{
            withSonarQubeEnv('sonar_local'){
                    echo "${scannerHome}"
	                bat "dotnet ${scannerHome}\\SonarScanner.MSBuild.dll begin /k:\"sonar-demo-app\""
	        }
        }
    }
    
    stage('Code Build'){
        steps{
            bat "dotnet build DemoWebApp\\DemoWebApp.sln"
        }
    }

    stage('End Sonar Analysis'){
        steps{
            withSonarQubeEnv('sonar_local'){
	                bat "dotnet ${scannerHome}\\SonarScanner.MSBuild.dll end"
	            }
        }
    }

    stage('Unit Tests'){
        steps{
            bat "dotnet test DemoWebApp\\DemoUT\\DemoUT.csproj --no-build"
        }
    }
    
    stage('Create Image'){
        steps{
            script {
                dockerImage = docker.build(registry + ":$BUILD_NUMBER","./DemoWebApp")
            }
        }
    }

    stage('Push Image'){
        steps{
            script {
                docker.withRegistry( '', registryCredential ) { 
                    dockerImage.push()
                }
            }
        }
    }

	}
	
    post{
		always {
    		cleanWs()
  		}
	}	
}